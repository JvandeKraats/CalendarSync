name: 'IaC Validation'

# We run on just PRs + main since this validate requires full read/write permissions to Azure and we can't do wildcards for the branch name in Azure OIDC federated credentials
on:
  push:
    branches:
    - main  
  pull_request:
    branches:
    - main

env:
  LOCATION: "westeurope"
  
#Special permissions required for OIDC authentication
permissions:
  actions: read
  id-token: write
  contents: read
  security-events: write

jobs:
  validation:
    name: 'IaC validation and build'
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Authenticate to Az CLI using OIDC
    - name: 'Az CLI login'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # Checks that all Bicep configuration files adhere to a canonical format
    - name: Bicep Lint
      uses: Azure/cli@v1
      with:
        inlineScript: az bicep build --file IaC/main.bicep
        
    # Validate whether a template is valid at subscription scope
    - name: Bicep Validate
      uses: Azure/cli@v1
      with:
        inlineScript: |
          az deployment sub validate \
            --name validate-${{ github.run_id }} \
            --template-file IaC/main.bicep \
            --location $LOCATION \
            --parameters gitHubPrincipalId=${{ vars.GITHUBPRINCIPALID}}

    # Validate ARM template
    - name: ARM Validate
      uses: Azure/cli@v1
      with:
        inlineScript: |
          az deployment sub validate \
            --name ARM-validate-${{ github.run_id }} \
            --template-file IaC/main.json \
            --location $LOCATION \
            --parameters gitHubPrincipalId=${{ vars.GITHUBPRINCIPALID}}

  what-if:
    name: what-if
    runs-on: ubuntu-latest
    needs: validation
    
    steps:
    #What-if ARM template
    - name: "What-If"
      uses: Azure/cli@v1
      with:
        inlineScript: |
          az deployment sub what-if \
            --name whatif-${{ github.run_id }} \
            --template-file IaC/main.json \
            --location $LOCATION > whatif \
            --parameters gitHubPrincipalId=${{ vars.GITHUBPRINCIPALID}}

    # Create string output of Whatif
    - name: Create String Output
      id: whatif-string
      run: |
        WHATIF=$(cat whatif)
        
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Whatif Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "$WHATIF" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT

    # Publish Terraform Plan as task summary
    - name: Publish Whatif to Task Summary
      env:
        SUMMARY: ${{ steps.whatif-string.outputs.summary }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
      
    # If this is a PR post the changes
    - name: Push Whatif Output to PR
      if: github.ref != 'refs/heads/main'
      uses: actions/github-script@v6
      env:
        SUMMARY: "${{ steps.whatif-string.outputs.summary }}"
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `${process.env.SUMMARY}`;
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
            })
  
  securtiy-checks:
    name: 'IaC validation'
    runs-on: ubuntu-latest

    steps:
    # Perform a security scan of the bicep code using checkov
    - name: Run Checkov action
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with: 
        skip_check: CKV_AZURE_35
        framework: bicep

    # Upload results to GitHub Advanced Security
    - name: Upload SARIF file
      if: success() || failure()
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: results.sarif
        category: checkov

  Upload-Artifact:
    name: Upload ARM Artifact
    runs-on: ubuntu-latest
    needs: validation

    steps:
    #Upload ARM template
    - name: Upload ARM template
      uses: actions/upload-artifact@v3
      with:
        name: drop
        path: |
          ./IaC/main.json

